package lib

import (
	"encoding/json"
	"fmt"
	"net/http"
)

const (
	jiraTicketApi = "/rest/api/3/issue/%s"
)

type JiraTicketResponse struct {
	Fields struct {
		IssueType struct {
			Name string `json:"name"`
		} `json:"issuetype"`
		JiraTeam struct {
			Name string `json:"value"`
		} `json:"customfield_11101"`
		VulnCategory struct {
			Name string `json:"value"`
		} `json:"customfield_11124"`
		LinkedTickets []LinkedTicket `json:"issuelinks"`
	}
}

type LinkedTicket struct {
	Type struct {
		Name string `json:"name"`
	} `json:"type"`
	InwardIssue struct {
		Key string `json:"key"`
	} `json:"inwardIssue"`
	OutwardIssue struct {
		Key string `json:"key"`
	} `json:"outwardIssue"`
}

type JiraTicketDetails struct {
	Team         string
	VulnCategory string
}

func getLinkedId(linkedTickets []LinkedTicket) string {
	linkedTicketId := ""
	if len(linkedTickets) > 0 {
		for _, linkedTicket := range linkedTickets {
			if linkedTicket.Type.Name == "Relates" {
				if len(linkedTicket.InwardIssue.Key) > 0 {
					linkedTicketId = linkedTicket.InwardIssue.Key
				} else if len(linkedTicket.OutwardIssue.Key) > 0 {
					linkedTicketId = linkedTicket.OutwardIssue.Key
				}
				break
			} else if linkedTicket.Type.Name == "Blocks" {
				if len(linkedTicket.InwardIssue.Key) > 0 {
					linkedTicketId = linkedTicket.InwardIssue.Key
				} else if len(linkedTicket.OutwardIssue.Key) > 0 {
					linkedTicketId = linkedTicket.OutwardIssue.Key
				}
				break
			}
		}
	}
	return linkedTicketId
}

func getJiraTicketDetails(jiraId string, isMain bool) JiraTicketDetails {
	if len(jiraId) == 0 {
		return JiraTicketDetails{}
	}
	api := Env.JiraUrl + fmt.Sprintf(jiraTicketApi, jiraId)
	bodyBytes, resErr := doHTTPRequest(http.MethodGet, api, nil)
	if resErr != nil {
		fmt.Printf("Error while making response while making request to jira tickets api, error: %s", resErr.Error())
		panic(resErr)
	}

	var ticket JiraTicketResponse
	err := json.Unmarshal(bodyBytes, &ticket)
	if err != nil {
		fmt.Printf("Error while decoding response while making request to jira tickets api, error: %s", err.Error())
		panic(err)
	}
	team := ticket.Fields.JiraTeam.Name
	category := ticket.Fields.VulnCategory.Name

	if ticket.Fields.IssueType.Name == "Product Vulnerability" {
		linkedTicketId := getLinkedId(ticket.Fields.LinkedTickets)

		if isMain && linkedTicketId != "" {
			newDetails := getJiraTicketDetails(linkedTicketId, false)
			if len(newDetails.Team) > 0 {
				team = newDetails.Team
			}
		}
	} else if ticket.Fields.IssueType.Name == "Bug" {
		linkedTicketId := getLinkedId(ticket.Fields.LinkedTickets)
		if isMain && linkedTicketId != "" {
			newDetails := getJiraTicketDetails(linkedTicketId, false)
			if len(newDetails.VulnCategory) > 0 {
				category = newDetails.VulnCategory
			}
		}
	}
	return JiraTicketDetails{
		Team:         team,
		VulnCategory: category,
	}
}
