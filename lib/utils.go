package lib

import (
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/pkg/errors"
)

type EnvironmentVariables struct {
	MattermostToken string
	JiraEmail       string
	JiraToken       string
	MattermostUrl   string
	JiraUrl         string
	S3Bucket        string
	PlaybookName    string
}

var Env = EnvironmentVariables{}

func ValidateAndGetEnvVars() error {

	// Check for Required Params
	mmToken := os.Getenv("MATTERMOST_TOKEN")
	if len(mmToken) == 0 {
		errMsg := "MATTERMOST_TOKEN environment variable is not set"
		fmt.Println(errMsg)
		return errors.New(errMsg)
	}
	Env.MattermostToken = mmToken

	jiraEmail := os.Getenv("JIRA_EMAIL")
	if len(jiraEmail) == 0 {
		errMsg := "JIRA_EMAIL environment variable is not set"
		fmt.Println(errMsg)
		return errors.New(errMsg)
	}
	Env.JiraEmail = jiraEmail

	jiraToken := os.Getenv("JIRA_TOKEN")
	if len(jiraToken) == 0 {
		errMsg := "JIRA_TOKEN environment variable is not set"
		fmt.Println(errMsg)
		return errors.New(errMsg)
	}
	Env.JiraToken = jiraToken

	s3Bucket := os.Getenv("S3_BUCKET")
	if len(s3Bucket) == 0 {
		errMsg := "S3_BUCKET environment variable is not set"
		fmt.Println(errMsg)
		return errors.New(errMsg)
	}
	Env.S3Bucket = s3Bucket

	// Check for Optional Params
	mmUrl := os.Getenv("MATTERMOST_URL")
	if len(mmUrl) == 0 {
		Env.MattermostUrl = "https://community-daily.mattermost.com"
	} else {
		Env.MattermostUrl = mmUrl
	}

	jiraUrl := os.Getenv("JIRA_URL")
	if len(jiraUrl) == 0 {
		Env.JiraUrl = "https://mattermost.atlassian.net"
	} else {
		Env.JiraUrl = jiraUrl
	}

	playbookName := os.Getenv("PLAYBOOK_NAME")
	if len(playbookName) == 0 {
		Env.PlaybookName = url.QueryEscape("Security Vulnerability Playbook")
	} else {
		Env.PlaybookName = url.QueryEscape(playbookName)
	}

	return nil
}

func doHTTPRequest(method string, url string, body io.Reader) ([]byte, error) {
	httpClient := http.Client{}
	nullJson := []byte{}
	req, err := http.NewRequest(method, url, body)
	req.Header.Set("Content-Type", "application/json")
	if strings.HasPrefix(url, Env.JiraUrl) {
		req.SetBasicAuth(Env.JiraEmail, Env.JiraToken)
	} else if strings.HasPrefix(url, Env.MattermostUrl) {
		req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", Env.MattermostToken))
	}

	if err != nil {
		fmt.Printf("bad request for url: %s, error: %s\n", url, err.Error())
		return nullJson, errors.Wrap(err, "bad request for url:"+url)
	}

	resp, err := httpClient.Do(req)
	if err != nil {
		fmt.Printf("connection problem for url: %s, error: %s\n", url, err.Error())
		return nullJson, errors.Wrap(err, "connection problem for url:"+url)
	}

	if resp.StatusCode != http.StatusOK {
		_ = resp.Body.Close()
		fmt.Printf("non-ok status code for url: %s, status code: %d\n", url, resp.StatusCode)
		return nullJson, errors.New("non-ok status code for url:" + url)
	}

	defer func() { _ = resp.Body.Close() }()
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("error while reading response body for url: %s, error: %s\n", url, err.Error())
		return nullJson, err
	}
	return bodyBytes, nil
}

func formatTime(t time.Time) string {
	if t.IsZero() {
		return ""
	}
	return t.Format(timeFormat)
}
func timeDiff(t1 time.Time, t2 time.Time) string {
	if t1.IsZero() || t2.IsZero() {
		return ""
	}
	days := int(t2.Sub(t1).Hours()) / 24
	hours := int(t2.Sub(t1).Hours()) % 24
	diff := ""
	if days > 0 {
		diff = fmt.Sprintf("%d days", days)
	}
	if hours > 0 {
		diff += fmt.Sprintf(" %d hours", hours)
	}
	if len(diff) == 0 {
		diff = "immediate"
	}
	return strings.TrimSpace(diff)
}

func UploadS3File(session *session.Session, content string, destination string) (string, error) {
	s3Client := s3.New(session)
	input := &s3.PutObjectInput{
		Body:   strings.NewReader(content),
		Bucket: aws.String(Env.S3Bucket),
		Key:    aws.String(destination),
	}

	_, err := s3Client.PutObject(input)
	if err != nil {
		if aerr, ok := err.(awserr.Error); ok {
			switch aerr.Code() {
			default:
				fmt.Println("failed to upload file", aerr.Error())
				return "", aerr
			}
		} else {
			// Print the error, cast err to awserr.Error to get the Code and
			// Message from an error.
			fmt.Println("failed to upload file", err.Error())
			return "", err
		}
	}

	if err != nil {
		return "", fmt.Errorf("failed to upload file, %v", err)
	}
	return destination, nil
}
